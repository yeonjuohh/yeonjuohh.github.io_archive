{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/behavioral-data-analysis-with-r&python/ch1/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Hado Log"}},"markdownRemark":{"id":"56203566-83f5-513c-925f-28b86b2b3015","excerpt":"Amount of Missing Data…","html":"<h2>Amount of Missing Data</h2>\n<p>만약에 누락된 데이터가 많지 않다면 간단하게 삭제하고 분석에 사용하는 것도 좋은 방법이다. 그런데 몇 개 이하여야 많지 않다는 것일까? 간단하게 확인할 수 있는 방법이 있다.</p>\n<ol>\n<li>누락된 값이 가장 많은 변수를 찾고 데이터 셋을 두개 만든다. 한 데이터 셋에서는 빈 곳에 최소값을, 다른 데이터 셋에는 최대값으로 채워넣는다.</li>\n<li>기존에 가지고 있던 데이터 셋까지 해서 회귀모델을 만들어 본다. X로는 누락된 값이 가장 많은 변수만을 사용한다.</li>\n<li>계수의 값이 크게 차이 나지 않는다면, 정확하게는 모델에 따라 다음 액션에 차이가 없다면 누락 데이터는 삭제해도 괜찮다.</li>\n</ol>\n<h2>Correlation of Missingness</h2>\n<p>어떤 변수를 다룰 건지 결정했다면, 빈 값들의 상관관계를 확인해야 한다. 한 변수의 빈 값이 다른 변수의 빈 값의 원인일 수도 있고, 같은 이유로 인해 두 변수의 값의 누락되었을 수도 있다.</p>\n<p>변수간 누락된 값의 상관관계를 계산해 보고 값이 1에 가까우면 더 자세히 확인해 볼 필요가 있다.</p>\n<h2>Dignosing Missing Data</h2>\n<p>이제 누락된 값의 원인을 찾을 차례이다. CD를 사용해서 해결할 수 있다.</p>\n<p>빈 값이 있는 상자는 점선으로 처리한다. 그리고 이 변수가 빈 값이라는 걸 알려주는 변수를 추가한다.</p>\n<p><img src=\"img1.png\" alt=\"CD with missing data\"></p>\n<h2>Cases of Missingness: Rubin’s Classification</h2>\n<p>빈 값에 대한 원인은 MECE 하게 3가지로 설명할 수 있다.</p>\n<ol>\n<li>외부 데이터 중 딱 하나의 변수 때문에 생긴다면 missing completely at random(MCAR)라 한다.</li>\n<li>데이터 중 하나 이상의 변수가 원인이라면 missing at random(MAR)이다.</li>\n<li>스스로가 누락된 값의 원인이라면 missing not at random(MNAR)이다. 위 CD에서 taste for vanilla가 Stated taste for vanilla에 영향을 미치는 것이다.</li>\n</ol>\n<p>변수가 MCAR, MAR, MNAR 중에 어디에 속하는지 모르겠다면 최악을 가정하는 게 좋다.</p>\n<h3>Diagnosing MCAR Variables</h3>\n<p>가장 간단한 경우로, 의도치 않게 누락된 데이터가 생기는 것이다. MAR, MNAR이라는 확신이 없다면 MCAR이라고 해도 괜찮다.</p>\n<p>다른 변수들을 사용해 관심 있는 변수가 누락인지 확인하는 logistic regression 모델을 적합해 본다. 만약에 유의미한 계수가 없다면 데이터 누락은 랜덤으로 생겼다고 할 수 있다.</p>\n<h3>Diagnosing MAR Variables</h3>\n<p>Logistic regression에서 유의미한 변수가 있다면 MAR일 가능성이 높다. 관심 변수가 누락되었을 때와 값이 있을 때 유의미한 변수의 밀도 그래프를 그려보면 눈으로 확인해 볼 수 있다. 만약에 유의미한 변수에도 누락된 값이 있다면 의미 없는 값으로 치환해 그래프를 그려볼 수 있다.</p>\n<h3>Diagnosing MNAR Variables</h3>\n<p>잠재 변수를 추가해 보고 이 변수의 누락된 값에 따라 분포가 달라진다면 MNAR이라 할 수 있다. 3가지 경우 중 가장 확인하기 어렵다.</p>\n<h3>Missingness as a Spectrum</h3>\n<p>빈 값의 분포는 probabilistic 하게 또는 deterministic 하게 생각할 수 있다. MCAR은 probabilistic에 가깝고 MNAR로 갈수록 deterministic 하다.</p>\n<h2>Handling Missing Data</h2>\n<p>누락된 값을 처리하는 이유는 인과관계를 추론할 때 혼란을 줄 수 있기 때문에 미리 해결하기 위해서다. 그렇기 때문에 누락된 값을 모두 채워야 된다거나 정확하게 채워야 된다는 생각은 필요 없다.</p>\n<h3>Introduction to Multiple Imputation</h3>\n<p>보통은 누락 데이터를 삭제하는 것 외에 평균으로 치환하는 등 빈 값을 하나의 값으로 채운다. 이 방법은 누락 데이터의 불확실성을 고려하지 않아 분석에 오류를 가져올 수 있다.</p>\n<p>MI는 이름에서 알 수 있듯이 빈 값에 들어갈 수 있는 다양한 값을 탐색해보고 결과를 합치는 방법이다. Python에서는 statsmodels.imputation 패키지에 있는 mice 알고리즘을 사용하면 된다.</p>\n<p><strong>Default Imputation Method: Predictive Mean Matching</strong></p>\n<p>PMM은 가장 가까운 값 중 하나를 랜덤으로 선택해 빈 값을 채운다. 분포에 대한 가정을 하지 않기 때문에 복잡한 분포 모양을 가진 변수에 사용할 때 유용하다. 하지만 차원이 커질수록 계산량이 너무 많아진다는 단점이 있다.</p>\n<p><strong>From PMM to Normal Imputation</strong></p>\n<p>PMM이 좋은 시작점이 될 수 있지만 어떤 경우에는 변수에 대해 미리 알고 있는 정보가 있을 수 있다. 우리는 대부분의 변수가 정규분포를 따른다는 걸 알고 있다. 이 정보를 사용한다면 더 빠르게 계산할 수 있다.</p>\n<h3>Adding Auxiliary Variables</h3>\n<p>누락된 값을 가진 변수가 외부 변수와 상관관계가 높은 경우가 많은데 이 경우에는 단순히 외부 변수를 포함해 MI 방법을 사용하면 된다. 이때 의도치 않게 외부 변수가 다른 변수와의 상관관계가 높게 나올 수 있기 때문에 정확하게 하기 위해서는 일부 변수만 분석에 사용하는 게 좋다.</p>\n<h3>Scaling Up the Number of Imputed Data Sets</h3>\n<p>데이터 셋은 최소 20개는 필요하다. 만약에 신뢰구간이나 변수 간의 관계도 분석하고 싶다면 50 ~ 100개는 필요하다.</p>","frontmatter":{"title":"Ch6. Handling Missinng Data","date":"July 29, 2022","description":"Behavioral Data Analysis with R & Python Chapter 6 Notes","category":null,"tags":["casual-inference"]}},"previous":{"fields":{"slug":"/data-analysis/bayesian_ab_test_mcmc/"},"frontmatter":{"title":"베이지안 A/B 테스트 - MCMC"}},"next":null},"pageContext":{"id":"56203566-83f5-513c-925f-28b86b2b3015","previousPostId":"73afd06a-43ae-536d-8dc3-6d9273ac7954","nextPostId":null}},
    "staticQueryHashes": ["2841359383"]}